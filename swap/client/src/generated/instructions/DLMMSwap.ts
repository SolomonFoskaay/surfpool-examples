/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { ArbitrageIxData, arbitrageIxDataBeet } from '../types/ArbitrageIxData'

/**
 * @category Instructions
 * @category DLMMSwap
 * @category generated
 */
export type DLMMSwapInstructionArgs = {
  arbitrageIxData: ArbitrageIxData
}
/**
 * @category Instructions
 * @category DLMMSwap
 * @category generated
 */
export const DLMMSwapStruct = new beet.BeetArgsStruct<
  DLMMSwapInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['arbitrageIxData', arbitrageIxDataBeet],
  ],
  'DLMMSwapInstructionArgs'
)
/**
 * Accounts required by the _DLMMSwap_ instruction
 *
 * @property [_writable_, **signer**] signerAcc
 * @property [] baseMint
 * @property [_writable_] feeCollectorAcc
 * @property [_writable_] baseMintAcc
 * @property [] tokenProgramId
 * @property [] systemProgramId
 * @property [] associatedTokenProgramId
 * @property [] mint
 * @property [_writable_] userMintAcc
 * @property [] dlmmProgramId
 * @property [] dlmmEventAuthority
 * @property [_writable_] lbPair
 * @property [_writable_] reserveX
 * @property [_writable_] reserveY
 * @property [_writable_] oracle
 * @property [_writable_] bin1
 * @property [_writable_] bin2
 * @property [_writable_] bin3
 * @category Instructions
 * @category DLMMSwap
 * @category generated
 */
export type DLMMSwapInstructionAccounts = {
  signerAcc: web3.PublicKey
  baseMint: web3.PublicKey
  feeCollectorAcc: web3.PublicKey
  baseMintAcc: web3.PublicKey
  tokenProgramId: web3.PublicKey
  systemProgramId: web3.PublicKey
  associatedTokenProgramId: web3.PublicKey
  mint: web3.PublicKey
  userMintAcc: web3.PublicKey
  dlmmProgramId: web3.PublicKey
  dlmmEventAuthority: web3.PublicKey
  lbPair: web3.PublicKey
  reserveX: web3.PublicKey
  reserveY: web3.PublicKey
  oracle: web3.PublicKey
  bin1: web3.PublicKey
  bin2: web3.PublicKey
  bin3: web3.PublicKey
}

export const dLMMSwapInstructionDiscriminator = 1

/**
 * Creates a _DLMMSwap_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DLMMSwap
 * @category generated
 */
export function createDLMMSwapInstruction(
  accounts: DLMMSwapInstructionAccounts,
  args: DLMMSwapInstructionArgs,
  programId = new web3.PublicKey('D7Nv2Yt9i7r1xSGgTZo9zGHgZ8wwiAX13nFodBXdpox4')
) {
  const [data] = DLMMSwapStruct.serialize({
    instructionDiscriminator: dLMMSwapInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signerAcc,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.feeCollectorAcc,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMintAcc,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgramId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgramId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgramId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userMintAcc,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.dlmmProgramId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.dlmmEventAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lbPair,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveX,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveY,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oracle,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bin1,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bin2,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bin3,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
